
open Printf

type t =
  {
    mutable classification_mode : Classification_mode.t;

    mutable taxonomy_filepath : string;

    mutable packet_parsing_mode : Packet_parsing_mode.t;

    (* mutable date_format_string : string; *)
    (* mutable time_format_string : string; *)
    (* mutable default_hour_minute_second : (int * int * int) option; *)

    mutable export_metrics_attributes : bool;

    mutable parallelization_mode : Parallelization_mode.t;
  }

let new_empty_t () =
  {
    classification_mode = Classification_mode.Not_defined;

    taxonomy_filepath = "";

    packet_parsing_mode = Packet_parsing_mode.IPV4;

    (* date_format_string = "%4d%2d%2d%s"; *)
    (* time_format_string = "%4d%2d%2d%2d%2d%2d%s"; *)
    (* default_hour_minute_second = None; *)
    
    export_metrics_attributes = false;

    parallelization_mode = Parallelization_mode.No_parallelization;
  }

let to_string t =
  (* sprintf *)
  (*   "Anomaly classification parameters:\nClassification mode: %s\ntaxonomy_filepath: %s\npacket parsing mode: %s\ntime format string: %s\nExport_metrics_attributes: %b" *)
  (*   (Classification_mode.to_string t.classification_mode) *)
  (*   t.taxonomy_filepath *)
  (*   (Packet_parsing_mode.to_string t.packet_parsing_mode) *)
  (*   t.time_format_string *)
  (*   t.export_metrics_attributes *)
  sprintf
    "Anomaly classification parameters:\nClassification mode: %s\ntaxonomy_filepath: %s\npacket parsing mode: %s\nExport_metrics_attributes: %b"
    (Classification_mode.to_string t.classification_mode)
    t.taxonomy_filepath
    (Packet_parsing_mode.to_string t.packet_parsing_mode)
    t.export_metrics_attributes


