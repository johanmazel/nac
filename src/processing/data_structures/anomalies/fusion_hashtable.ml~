
open Printf

open Maps

let fusion_map hashtable_1 hashtable_2 =

  let detailed_metrics_int_map_1 =
    Hashtbl.fold
      (fun int data int_map ->
        Int_map.add
          int
          data
          int_map
      )
      hashtable_1
      Int_map.empty
  in

  let detailed_metrics_int_map_2 =
    Hashtbl.fold
      (fun int (five_tuple_flow_list, detailed_metrics) int_map ->
        Int_map.add
          int
          (five_tuple_flow_list, detailed_metrics)
          int_map
      )
      hashtable_2
      Int_map.empty
  in

  let int_map =
    Int_map.merge
      (fun int option_1 option_2 ->
        match option_1 with
        | None ->
          (
            match option_2 with
            | None -> failwith "Anomaly_detailed_metrics_container: apply_anomaly_container_five_tuple_flow_detailed_metrics_container: nothing a five_tuple_flow"
            | Some (five_tuple_flow_list_2, detailed_metrics_2) -> Some (five_tuple_flow_list_2, detailed_metrics_2)
          )
        | Some (five_tuple_flow_list_1, detailed_metrics_1) ->
          (
            match option_2 with
            | None -> Some (five_tuple_flow_list_1, detailed_metrics_1)
            | Some (five_tuple_flow_list_2, detailed_metrics_2) ->
	      Some
		(
		  (Batteries.List.unique_cmp ~cmp: Five_tuple_flow.compare 
		     (List.append five_tuple_flow_list_1 five_tuple_flow_list_2)
		  )
		    ,
		  (Detailed_metrics.fusion detailed_metrics_1 detailed_metrics_2)
		) 
          )
      )
      detailed_metrics_int_map_1
      detailed_metrics_int_map_2
  in

  let new_hashtable = Hashtbl.create (Int_map.cardinal int_map) in

  Int_map.iter
    (fun indice detailed_metrics ->
      Hashtbl.add
        new_hashtable
        indice
        detailed_metrics
    )
    int_map;

  debug "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_map: fusion_map: end";

  new_hashtable
in

let parallelization_mode_to_use =
  if Five_tuple_flow_metrics_container.length five_tuple_flow_metrics_container < 5000000 then
    parallelization_mode
  else 
    Parallelization_mode.No_parallelization 2000
in

let detailed_metrics_hashtable =
  Map_data.fold_list
    parallelization_mode_to_use
    (fun (count_hashtable_1, tuple_hashtable_1) (five_tuple_flow, five_tuple_flow_metrics) ->
      (
        let src_addr,
	  dst_addr,
	  proto,
	  src_port,
	  dst_port
          =
          Five_tuple_flow.to_five_tuple
            five_tuple_flow
        in

        let (new_count_hashtable_1, new_tuple_hashtable_1)  =
          Mawilab_admd.Anomaly_container.fold_left
            (fun (count_hashtable_2, tuple_hashtable_2) anomaly ->
	      (
                    (* debug "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_map: comparing"; *)

	        let compare_result =
	          Mawilab_admd.Anomaly.match_flow
	            five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_sec_start
	            five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_usec_start
	            five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_sec_end
	            five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_usec_end
                    false
	                (* five_tuple_flow_metrics.Five_tuple_flow_metrics.nb_packets.IntSimple.value *)
	            src_addr
	            dst_addr
	            (Transport_protocol_translation.transport_protocol_for_metrics_to_admd_transport_protocol proto)
	            src_port
	            dst_port
	            anomaly
		in

                    (* debug *)
                    (*   "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_map:\n%s\n%s" *)
                    (*   (Five_tuple_flow.to_string five_tuple_flow) *)
                    (*   (Mawilab_admd.Anomaly.to_string To_string_mode.Simple anomaly); *)

                    (* debug *)
                    (*   "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_map: %b\n\n" *)
                    (*   compare_result; *)

		let count_hashtable, tuple_hashtable =
	          if compare_result then
		    (
	              let indice = anomaly.Mawilab_admd.Anomaly.indice in
		      
			  (* debug *)
			  (*   "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_map: %d" *)
			  (*   indice; *)

		      let new_count_hashtable =
                        try
			  (
			    let anomaly_count =
			      Hashtbl.find
                                count_hashtable_2
                                five_tuple_flow
			    in

			    Hashtbl.replace
                              count_hashtable_2
                              five_tuple_flow
			      (anomaly_count + 1);

			    count_hashtable_2
			  )
                        with
                        | Not_found ->
			  (
			    Hashtbl.add
			      count_hashtable_2
			      five_tuple_flow
			      1;

			    count_hashtable_2
			  )
		      in


                      let new_tuple_hashtable =
                        try
                          (
			    let five_tuple_flow_list, found_detailed_metrics =
			      Hashtbl.find
                                tuple_hashtable_2
                                indice
			    in

			    let detailed_metrics =
                              Detailed_metrics.of_five_tuple_flow_metrics
                                five_tuple_flow
                                five_tuple_flow_metrics
			    in
			    Detailed_metrics.append
			      found_detailed_metrics
			      detailed_metrics;

			    Hashtbl.replace
                              tuple_hashtable_2
                              indice
                              ((five_tuple_flow :: five_tuple_flow_list), found_detailed_metrics);


			    tuple_hashtable_2
                          )
                        with
                        | Not_found ->
                          (
			    let new_detailed_metrics =
			      Detailed_metrics.of_five_tuple_flow_metrics
			        five_tuple_flow
			        five_tuple_flow_metrics
			    in

			    Hashtbl.add
                              tuple_hashtable_2
                              indice
                              ([ five_tuple_flow ], new_detailed_metrics);
			    
			    tuple_hashtable_2
                          )
                      in


		      (new_count_hashtable, new_tuple_hashtable)
		    )
		  else
		    (
                      (count_hashtable_2, tuple_hashtable_2)
		    )
		in

		(count_hashtable, tuple_hashtable)
              )
	    )
            (count_hashtable_1, tuple_hashtable_1)
            anomaly_container
	in

	(new_count_hashtable_1, new_tuple_hashtable_1)
      )
    )
    fusion_map
    ((Hashtbl.create nb_five_tuple_flow), (Hashtbl.create nb_anomaly))
    five_tuple_flow_metrics_tuple_list
in

    (* Completing metrics for anomalies with empty traffic *)
Mawilab_admd.Anomaly_container.iter
  (fun anomaly ->
    try 
      (
	let _detailed_metrics_found =
	  Hashtbl.find
            detailed_metrics_hashtable 
            anomaly.Mawilab_admd.Anomaly.indice
	in

	()
      )
    with
    | Not_found ->
      (
	Hashtbl.add
	  detailed_metrics_hashtable
	  anomaly.Mawilab_admd.Anomaly.indice 
	  ([], Detailed_metrics.new_empty_t ())
      )
  )
  anomaly_container;

    (* t.detailed_metrics_int_map <- new_detailed_metrics_int_map; *)

debug "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_map: end";

new_t
  detailed_metrics_hashtable

  (* t *)
  )

(* let of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_hashtable *)
(*     parallelization_mode *)
(*     five_tuple_flow_detailed_metrics_container *)
(*     anomaly_container *)
(*     = *)
(*   ( *)
(*     debug "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_hashtbl: call"; *)

(*     let five_tuple_flow_metrics_tuple_list = *)
(*       Five_tuple_flow_metrics_container.to_list *)
(*         five_tuple_flow_detailed_metrics_container *)
(*     in *)

(*     let nb_anomaly = Mawilab_admd.Anomaly_container.length anomaly_container in *)

(*     let fusion_hashtable hashtable_1 hashtable_2 = *)
(*       Hashtbl.iter *)
(* 	(fun indice_2 detailed_metrics_2 -> *)
(* 	  ( *)
(* 	    try( *)
(* 	      let detailed_metrics_1 = *)
(* 		Hashtbl.find *)
(* 		  hashtable_1 *)
(*                   indice_2 *)
(* 	      in    *)

(* 	      Hashtbl.replace *)
(* 		hashtable_1 *)
(* 		indice_2 *)
(* 		(Detailed_metrics.fusion detailed_metrics_1 detailed_metrics_2) *)
(* 	    ); *)
(* 	    with *)
(* 	    | Not_found -> *)
(* 	      ( *)
(* 		Hashtbl.add *)
(* 		  hashtable_1 *)
(* 		  indice_2 *)
(*                   detailed_metrics_2; *)
(* 	      ); *)
(* 	  ) *)
(* 	) *)
(* 	hashtable_2; *)
      
(*       hashtable_1 *)
(*     in *)

(*     let new_detailed_metrics_int_map = *)
(*       Map_data.fold_list *)
(*         parallelization_mode *)
(*         (fun hashtable_1 (five_tuple_flow, five_tuple_flow_metrics) -> *)
(*           ( *)
(*             (\* let src_ip_option *\) *)
(* 	    (\*     , dst_ip_option *\) *)
(* 	    (\*       , proto_option *\) *)
(* 	    (\*         , src_port_option *\) *)
(* 	    (\* 	      , dst_port_option *\) *)
(*             (\*             = *\) *)
(*             (\*   Five_tuple_flow.to_five_tuple_option *\) *)
(*             (\*     five_tuple_flow *\) *)
(*             (\* in *\) *)
(*             (\* let proto_option = *\) *)
(* 	    (\*   match proto_option with *\) *)
(* 	    (\*   | None -> None *\) *)
(* 	    (\*   | Some int -> Some (Transport_protocol.of_int int) *\) *)
(* 	    (\* in *\) *)

(*             let src_addr, *)
(* 	      dst_addr, *)
(* 	      proto, *)
(* 	      src_port, *)
(* 	      dst_port *)
(*               = *)
(*               Five_tuple_flow.to_five_tuple *)
(*                 five_tuple_flow *)
(*             in *)

(*             let new_hashtable_1 = *)
(*               Mawilab_admd.Anomaly_container.fold_left *)
(*                 (fun hashtable_2 anomaly -> *)
(* 	          ( *)
(* 	            (\* let _compare_result = *\) *)
(* 	            (\*   Mawilab_admd.Anomaly.match_flow_option *\) *)
(* 	            (\*     five_tuple_flow_detailed_metrics.Five_tuple_flow_detailed_metrics.timestamp_sec_start *\) *)
(* 	            (\*     five_tuple_flow_detailed_metrics.Five_tuple_flow_detailed_metrics.timestamp_usec_start *\) *)
(* 	            (\*     five_tuple_flow_detailed_metrics.Five_tuple_flow_detailed_metrics.timestamp_sec_end *\) *)
(* 	            (\*     five_tuple_flow_detailed_metrics.Five_tuple_flow_detailed_metrics.timestamp_usec_end *\) *)
(* 	            (\*     five_tuple_flow_detailed_metrics.Five_tuple_flow_detailed_metrics.nb_packets.IntSimple.value *\) *)
(* 	            (\*     src_ip_option *\) *)
(* 	            (\*     dst_ip_option *\) *)
(* 	            (\*     proto_option *\) *)
(* 	            (\*     src_port_option *\) *)
(* 	            (\*     dst_port_option *\) *)
(* 	            (\*     anomaly *\) *)
(* 		    (\* in *\) *)
	            
(* 	            let compare_result = *)
(* 	              Mawilab_admd.Anomaly.match_flow *)
(* 	                five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_sec_start *)
(* 	                five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_usec_start *)
(* 	                five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_sec_end *)
(* 	                five_tuple_flow_metrics.Five_tuple_flow_metrics.timestamp_usec_end *)
(*                         false *)
(* 	                (\* five_tuple_flow_metrics.Five_tuple_flow_metrics.nb_packets.IntSimple.value *\) *)
(* 	                src_addr *)
(* 	                dst_addr *)
(* 	                (Transport_protocol_translation.transport_protocol_for_metrics_to_admd_transport_protocol proto) *)
(* 	                src_port *)
(* 	                dst_port *)
(* 	                anomaly *)
(* 		    in *)

(* 	            if compare_result then *)
(* 	              ( *)
(* 	                let indice = anomaly.Mawilab_admd.Anomaly.indice in *)
			
(*                         let new_hashtbl = *)
(*                           try *)
(*                             ( *)
(* 			      let found_detailed_metrics = *)
(* 			        Hashtbl.find *)
(*                                   hashtable_2 *)
(*                                   indice *)
(* 			      in *)

(*                               let detailed_metrics = *)
(*                                 Detailed_metrics.of_five_tuple_flow_metrics *)
(*                                   five_tuple_flow *)
(*                                   five_tuple_flow_metrics *)
(*                               in *)

(*                               let updated_detailed_metrics = *)
(*                                 Detailed_metrics.fusion *)
(*                                   found_detailed_metrics *)
(*                                   detailed_metrics *)
(*                               in *)

(*                               Hashtbl.replace *)
(*                                 hashtable_2 *)
(*                                 indice *)
(*                                 updated_detailed_metrics; *)

(*                               (\* BUG: netscanUDNet become unknown *\) *)
(*                               (\* Detailed_metrics.update_five_tuple_flow_detailed_metrics *\) *)
(*                               (\*   found_detailed_metrics *\) *)
(*                               (\*   five_tuple_flow *\) *)
(*                               (\*   five_tuple_flow_detailed_metrics; *\) *)

(*                               hashtable_2 *)
(*                             ) *)
(*                           with *)
(*                           | Not_found -> *)
(*                             ( *)
(* 			      let new_detailed_metrics = *)
(* 			        Detailed_metrics.of_five_tuple_flow_metrics *)
(* 			          five_tuple_flow *)
(* 			          five_tuple_flow_metrics *)
(* 			      in *)

(*                               Hashtbl.add *)
(*                                 hashtable_2 *)
(*                                 indice *)
(*                                 new_detailed_metrics; *)
			      
(* 			      hashtable_2 *)
(*                             ) *)
(*                         in *)

(*                         new_hashtbl *)
(* 	              ) *)
(*                     else *)
(*                       ( *)
(*                         hashtable_2 *)
(*                       ) *)
(* 	          ) *)
(*                 ) *)
(*                 hashtable_1 *)
(*                 anomaly_container *)
(*             in *)

(*             new_hashtable_1 *)
(*           ) *)
(*         ) *)
(*         fusion_hashtable *)
(*         (Hashtbl.create nb_anomaly) *)
(*         five_tuple_flow_metrics_tuple_list *)
(*     in *)

(*     (\* Completing metrics for anomalies with empty traffic *\) *)
(*     Mawilab_admd.Anomaly_container.iter *)
(*       (fun anomaly -> *)
(*         try  *)
(*           ( *)
(*             let _detailed_metrics_found = *)
(*               Hashtbl.find *)
(*                 new_detailed_metrics_int_map  *)
(*                 anomaly.Mawilab_admd.Anomaly.indice *)
(*             in *)

(*             () *)
(*           ) *)
(*         with *)
(*         | Not_found -> *)
(*           ( *)
(*             Hashtbl.add *)
(*               new_detailed_metrics_int_map *)
(*               anomaly.Mawilab_admd.Anomaly.indice  *)
(*               (Detailed_metrics.new_empty_t ()) *)
(*           ) *)
(*       ) *)
(*       anomaly_container; *)

(*     (\* t.detailed_metrics_int_map <- new_detailed_metrics_int_map; *\) *)
    
(*     debug "of_anomaly_container_five_tuple_flow_metrics_container_parallelized_list_fusion_map: end"; *)

(*     new_t *)
(*       new_detailed_metrics_int_map *)

(*   (\* t *\) *)
(*   ) *)
